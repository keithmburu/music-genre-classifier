            # N_k_counts = {}
            # N_kjv_counts = {}
            # for example in train_partition.data
            #     if example.label in N_k_counts
            #         N_k_counts[example.label] += 1
            #     else
            #         N_k_counts[example.label] = 1
            #     for feature in example.features
            #         if example.label in N_kjv_counts and feature in N_kjv_counts[example.label] and example.features[feature] in N_kjv_counts[example.label][feature]
            #             N_kjv_counts[example.label][feature][example.features[feature]] += 1
            #         else
            #             N_kjv_counts[example.label][feature][example.features[feature]] = 1

            # self.prior = [math.log(N_k_counts[label] + 1) - math.log(train_partition.n + K) for label in N_k_counts.keys()]
            # self.likelihood = []
            # for label in N_kjv_counts
            #     label_dict = {}
            #     for feature in N_kjv_counts[label]
            #         feature_dict = {}
            #         for value in N_kjv_counts[label][feature]
            #             feature_dict[value] = math.log(N_kjv_counts[label][feature][value] + 1) - math.log(N_kjv_counts[label] + 
            #                     len(N_kjv_counts[label][feature]))
            #         label_dict[feature] = feature_dict
            #     self.likelihood.append(label_dict)
            # print(self.likelihood[0])

# def confusion_matrix_formatted(confusion_matrix):
#     """
#     Converts confusion matrix to a more readable format
#     confusion_matrix: array showing classification accuracy
#     """
#     output = "      prediction\n     0  1  2  3  4  5  6  7  8  9\n   ---------------\n 0|"+\
#         "  {a}  {b} \n 1|  {k}  {l} \n 2|  {k}  {l} ".format(i=confusion_matrix[0][0],
#         j=confusion_matrix[0][1], k=confusion_matrix[1][0],
#         l=confusion_matrix[1][1])
#     return output

    # data = pd.DataFrame(pd.read_csv("data/features_n20_3_sec_shuffled.csv"))
    # print(data)
    # sns.pairplot(data, hue="label")
    # exit()
